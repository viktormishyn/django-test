!!! After git clone:
1) Run init.sh
2) Create postgres db
3) Apply migrations
4) Create admin superuser

-------------------------------------

django-admin startproject <projectname>
cd <projectname>

python3 manage.py runserver

python3 manage.py startapp <appname>
# or django-admin startapp <appname>

-------------------------------------

python3 manage.py makemigrations
# generates migration files for later use (unapplied migration) using current model fields and db tables
# creates numbered files in <appname>/migrations/

python3 manage.py showmigrations


python3 manage.py migrate
# runs all migrations in the projectname
# can also run only migrations in a specific app to a specific migration:
# python3 manage.py migrate <appname> <number>


python3 manage.py load_pet_data
# seed db using custom script in adoptions/management/commands/

-------------------------------------

python3 manage.py createsuperuser

# to register models in admin.py:
from .models import <model>
admin.site.register(<model>)

# or better (this way we can see object fields):
@admin.register(<model>)
class <model>Admin(admin.ModelAdmin):
    list_display = ['field1', 'field2', 'field3', 'field4', 'field5']

-------------------------------------

#Query data with Django ORM
adoptions - <appname>
Pet - <modelname>

python3 manage.py shell
# interactive python shell with django initialized

from adoptions.models import Pet

pets = Pet.objects.all()
# QuerySet of all instances of the model

pet = Pet.objects.get(id=1)
# single instances
# possible exceptions: DoesNotExist, MultipleObjectsReturned

pet.vaccinations.all()
# QuerySet of all Vaccine instances associated with this Pet object through many-to-many relational mapping

================================================================

STATIC files (in each app we put a folder static/)

# in settings.py:
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# in urls.py:
from django.conf import settings
from django.conf.urls.static import static
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

python3 manage.py collectstatic

-----------------------------------

in similar way we add our media files:

# in settings.py:
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR

#in urls.py:
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

===============================================================

POSTGRESQL

sudo apt-get update
sudo apt-get install python3-pip python3-venv python-dev libpq-dev postgresql postgresql-contrib

sudo su - postgres
psql

CREATE DATABASE portfoliodb;
CREATE USER portfoliodb_user WITH PASSWORD 'password';

ALTER ROLE portfoliodb_user SET client_encoding TO 'utf8';
ALTER ROLE portfoliodb_user SET default_transaction_isolation TO 'read committed';
ALTER ROLE portfoliodb_user SET timezone TO 'UTC';

GRANT ALL PRIVILEGES ON DATABASE portfoliodb TO portfoliodb_user;

\q
exit

In Django settings.py:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'portfoliodb',
        'USER': 'portfoliodb_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

======================================================================

for SELENIUM:
Put webdriver into env/bin/ folder (to check path env variable: $PATH)

python3 manage.py test
# run all tests

python3 manage.py test <appname>.tests.UnitTestCase
# run just one test creates

python3 manage.py test <appname>.tests.UnitTestCase.test_home_homepage_template
# run just one test method














